# Generated by Django 2.2.4 on 2020-03-06 11:37

from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
        ('merchants', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Listing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default=None, max_length=120, null=True)),
                ('category', models.CharField(choices=[('BEV', 'bevrages'), ('FR', 'fruits'), ('UT', 'utensils'), ('SP', 'spices'), ('OT', 'others'), ('DA', 'Dairy'), ('CL', 'cleaners'), ('M', 'meat'), ('PG', 'PaperGoods'), ('DBG', 'Dry/BakingGoods'), ('VEG', 'veggies'), ('CG', 'CannedGoods'), ('BR', 'Bread/Bakery'), ('HE', 'herbs')], default=None, max_length=120)),
                ('brand', models.CharField(blank=True, default=None, max_length=120, null=True)),
                ('oldprice', models.DecimalField(blank=True, decimal_places=2, default=None, max_digits=10, null=True)),
                ('newprice', models.DecimalField(blank=True, decimal_places=2, default=None, max_digits=10, null=True)),
                ('description', models.CharField(blank=True, default=None, max_length=120, null=True)),
                ('qty', models.IntegerField(blank=True, default=None, null=True)),
                ('photo', models.ImageField(blank=True, default='../static/img/fruits.png', null=True, upload_to='photos/%Y/%m/%d')),
                ('posted', models.DateTimeField(auto_now_add=True)),
                ('is_valid', models.BooleanField(default=True)),
                ('validity', models.DateField(blank=True, default=None, null=True)),
                ('merchant', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='merchants.Merchant')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
        ),
    ]
